/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jberger.pergen.generated.node;

import org.jberger.pergen.generated.analysis.Analysis;

@SuppressWarnings("nls")
public final class AManyRelationDefinition extends PRelationDefinition
{
    private THas _has_;
    private PMayBeZero _mayBeZero_;
    private TMany _many_;
    private TIdentifier _identifier_;

    public AManyRelationDefinition()
    {
        // Constructor
    }

    public AManyRelationDefinition(
        @SuppressWarnings("hiding") THas _has_,
        @SuppressWarnings("hiding") PMayBeZero _mayBeZero_,
        @SuppressWarnings("hiding") TMany _many_,
        @SuppressWarnings("hiding") TIdentifier _identifier_)
    {
        // Constructor
        setHas(_has_);

        setMayBeZero(_mayBeZero_);

        setMany(_many_);

        setIdentifier(_identifier_);

    }

    @Override
    public Object clone()
    {
        return new AManyRelationDefinition(
            cloneNode(this._has_),
            cloneNode(this._mayBeZero_),
            cloneNode(this._many_),
            cloneNode(this._identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAManyRelationDefinition(this);
    }

    public THas getHas()
    {
        return this._has_;
    }

    public void setHas(THas node)
    {
        if(this._has_ != null)
        {
            this._has_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._has_ = node;
    }

    public PMayBeZero getMayBeZero()
    {
        return this._mayBeZero_;
    }

    public void setMayBeZero(PMayBeZero node)
    {
        if(this._mayBeZero_ != null)
        {
            this._mayBeZero_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mayBeZero_ = node;
    }

    public TMany getMany()
    {
        return this._many_;
    }

    public void setMany(TMany node)
    {
        if(this._many_ != null)
        {
            this._many_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._many_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._has_)
            + toString(this._mayBeZero_)
            + toString(this._many_)
            + toString(this._identifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._has_ == child)
        {
            this._has_ = null;
            return;
        }

        if(this._mayBeZero_ == child)
        {
            this._mayBeZero_ = null;
            return;
        }

        if(this._many_ == child)
        {
            this._many_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._has_ == oldChild)
        {
            setHas((THas) newChild);
            return;
        }

        if(this._mayBeZero_ == oldChild)
        {
            setMayBeZero((PMayBeZero) newChild);
            return;
        }

        if(this._many_ == oldChild)
        {
            setMany((TMany) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
