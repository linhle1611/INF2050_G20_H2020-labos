/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jberger.pergen.generated.node;

import org.jberger.pergen.generated.analysis.Analysis;
import java.util.*;

@SuppressWarnings("nls")
public final class AEntityDefinition extends PEntityDefinition
{
    private TEntity _entity_;
    private TIdentifier _identifier_;
    private TLPar _lPar_;
    private PInnerDefinition _innerDefinition_;
    private final LinkedList<PMoreInnerDefinition> _moreInnerDefinition_ = new LinkedList<PMoreInnerDefinition>();
    private TRPar _rPar_;
    private TSemicolon _semicolon_;

    public AEntityDefinition()
    {
        // Constructor
    }

    public AEntityDefinition(
        @SuppressWarnings("hiding") TEntity _entity_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PInnerDefinition _innerDefinition_,
        @SuppressWarnings("hiding") List<PMoreInnerDefinition> _moreInnerDefinition_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setEntity(_entity_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setInnerDefinition(_innerDefinition_);

        setMoreInnerDefinition(_moreInnerDefinition_);

        setRPar(_rPar_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AEntityDefinition(
            cloneNode(this._entity_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._innerDefinition_),
            cloneList(this._moreInnerDefinition_),
            cloneNode(this._rPar_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEntityDefinition(this);
    }

    public TEntity getEntity()
    {
        return this._entity_;
    }

    public void setEntity(TEntity node)
    {
        if(this._entity_ != null)
        {
            this._entity_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._entity_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PInnerDefinition getInnerDefinition()
    {
        return this._innerDefinition_;
    }

    public void setInnerDefinition(PInnerDefinition node)
    {
        if(this._innerDefinition_ != null)
        {
            this._innerDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._innerDefinition_ = node;
    }

    public LinkedList<PMoreInnerDefinition> getMoreInnerDefinition()
    {
        return this._moreInnerDefinition_;
    }

    public void setMoreInnerDefinition(List<PMoreInnerDefinition> list)
    {
        this._moreInnerDefinition_.clear();
        this._moreInnerDefinition_.addAll(list);
        for(PMoreInnerDefinition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._entity_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._innerDefinition_)
            + toString(this._moreInnerDefinition_)
            + toString(this._rPar_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._entity_ == child)
        {
            this._entity_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._innerDefinition_ == child)
        {
            this._innerDefinition_ = null;
            return;
        }

        if(this._moreInnerDefinition_.remove(child))
        {
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._entity_ == oldChild)
        {
            setEntity((TEntity) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._innerDefinition_ == oldChild)
        {
            setInnerDefinition((PInnerDefinition) newChild);
            return;
        }

        for(ListIterator<PMoreInnerDefinition> i = this._moreInnerDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMoreInnerDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
